// Code generated by internal/hexe/gen/coords; DO NOT EDIT.

package hexe

import "github.com/legendary-code/hexe/pkg/hexe/coord"

type AxialGrid[T any] Grid[T, coord.Axial, *coord.Axials]
type axialGrid[T any] struct {
	*grid[T, coord.Axial, *coord.Axials]
}

func NewAxialGrid[T any](options ...Option[T]) AxialGrid[T] {
	return &axialGrid[T]{grid: newGrid[T, coord.Axial, *coord.Axials](options...)}
}
func newAxialGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) AxialGrid[T] {
	return &axialGrid[T]{grid: convertGrid[T, C, CS, coord.Axial, *coord.Axials](grid)}
}
func (a *axialGrid[T]) Get(index coord.Axial) T {
	return a.grid.get(index)
}
func (a *axialGrid[T]) GetAll(index *coord.Axials) Items[T, coord.Axial] {
	return a.grid.getAll(index, coord.Axial.Axial)
}
func (a *axialGrid[T]) Index(index coord.Axial) (T, bool) {
	return a.grid.index(index)
}
func (a *axialGrid[T]) Set(index coord.Axial, value T) {
	a.grid.set(index, value)
}
func (a *axialGrid[T]) Delete(index coord.Axial) {
	a.grid.delete(index)
}
func (a *axialGrid[T]) Iterator() GridIterator[T, coord.Axial, *coord.Axials] {
	return a.iterator(coord.Axial.Axial)
}

type DoubleHeightGrid[T any] Grid[T, coord.DoubleHeight, *coord.DoubleHeights]
type doubleHeightGrid[T any] struct {
	*grid[T, coord.DoubleHeight, *coord.DoubleHeights]
}

func NewDoubleHeightGrid[T any](options ...Option[T]) DoubleHeightGrid[T] {
	return &doubleHeightGrid[T]{grid: newGrid[T, coord.DoubleHeight, *coord.DoubleHeights](options...)}
}
func newDoubleHeightGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) DoubleHeightGrid[T] {
	return &doubleHeightGrid[T]{grid: convertGrid[T, C, CS, coord.DoubleHeight, *coord.DoubleHeights](grid)}
}
func (d *doubleHeightGrid[T]) Get(index coord.DoubleHeight) T {
	return d.grid.get(index)
}
func (d *doubleHeightGrid[T]) GetAll(index *coord.DoubleHeights) Items[T, coord.DoubleHeight] {
	return d.grid.getAll(index, coord.Axial.DoubleHeight)
}
func (d *doubleHeightGrid[T]) Index(index coord.DoubleHeight) (T, bool) {
	return d.grid.index(index)
}
func (d *doubleHeightGrid[T]) Set(index coord.DoubleHeight, value T) {
	d.grid.set(index, value)
}
func (d *doubleHeightGrid[T]) Delete(index coord.DoubleHeight) {
	d.grid.delete(index)
}
func (d *doubleHeightGrid[T]) Iterator() GridIterator[T, coord.DoubleHeight, *coord.DoubleHeights] {
	return d.iterator(coord.Axial.DoubleHeight)
}

type DoubleWidthGrid[T any] Grid[T, coord.DoubleWidth, *coord.DoubleWidths]
type doubleWidthGrid[T any] struct {
	*grid[T, coord.DoubleWidth, *coord.DoubleWidths]
}

func NewDoubleWidthGrid[T any](options ...Option[T]) DoubleWidthGrid[T] {
	return &doubleWidthGrid[T]{grid: newGrid[T, coord.DoubleWidth, *coord.DoubleWidths](options...)}
}
func newDoubleWidthGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) DoubleWidthGrid[T] {
	return &doubleWidthGrid[T]{grid: convertGrid[T, C, CS, coord.DoubleWidth, *coord.DoubleWidths](grid)}
}
func (d *doubleWidthGrid[T]) Get(index coord.DoubleWidth) T {
	return d.grid.get(index)
}
func (d *doubleWidthGrid[T]) GetAll(index *coord.DoubleWidths) Items[T, coord.DoubleWidth] {
	return d.grid.getAll(index, coord.Axial.DoubleWidth)
}
func (d *doubleWidthGrid[T]) Index(index coord.DoubleWidth) (T, bool) {
	return d.grid.index(index)
}
func (d *doubleWidthGrid[T]) Set(index coord.DoubleWidth, value T) {
	d.grid.set(index, value)
}
func (d *doubleWidthGrid[T]) Delete(index coord.DoubleWidth) {
	d.grid.delete(index)
}
func (d *doubleWidthGrid[T]) Iterator() GridIterator[T, coord.DoubleWidth, *coord.DoubleWidths] {
	return d.iterator(coord.Axial.DoubleWidth)
}

type EvenQGrid[T any] Grid[T, coord.EvenQ, *coord.EvenQs]
type evenQGrid[T any] struct {
	*grid[T, coord.EvenQ, *coord.EvenQs]
}

func NewEvenQGrid[T any](options ...Option[T]) EvenQGrid[T] {
	return &evenQGrid[T]{grid: newGrid[T, coord.EvenQ, *coord.EvenQs](options...)}
}
func newEvenQGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) EvenQGrid[T] {
	return &evenQGrid[T]{grid: convertGrid[T, C, CS, coord.EvenQ, *coord.EvenQs](grid)}
}
func (e *evenQGrid[T]) Get(index coord.EvenQ) T {
	return e.grid.get(index)
}
func (e *evenQGrid[T]) GetAll(index *coord.EvenQs) Items[T, coord.EvenQ] {
	return e.grid.getAll(index, coord.Axial.EvenQ)
}
func (e *evenQGrid[T]) Index(index coord.EvenQ) (T, bool) {
	return e.grid.index(index)
}
func (e *evenQGrid[T]) Set(index coord.EvenQ, value T) {
	e.grid.set(index, value)
}
func (e *evenQGrid[T]) Delete(index coord.EvenQ) {
	e.grid.delete(index)
}
func (e *evenQGrid[T]) Iterator() GridIterator[T, coord.EvenQ, *coord.EvenQs] {
	return e.iterator(coord.Axial.EvenQ)
}

type EvenRGrid[T any] Grid[T, coord.EvenR, *coord.EvenRs]
type evenRGrid[T any] struct {
	*grid[T, coord.EvenR, *coord.EvenRs]
}

func NewEvenRGrid[T any](options ...Option[T]) EvenRGrid[T] {
	return &evenRGrid[T]{grid: newGrid[T, coord.EvenR, *coord.EvenRs](options...)}
}
func newEvenRGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) EvenRGrid[T] {
	return &evenRGrid[T]{grid: convertGrid[T, C, CS, coord.EvenR, *coord.EvenRs](grid)}
}
func (e *evenRGrid[T]) Get(index coord.EvenR) T {
	return e.grid.get(index)
}
func (e *evenRGrid[T]) GetAll(index *coord.EvenRs) Items[T, coord.EvenR] {
	return e.grid.getAll(index, coord.Axial.EvenR)
}
func (e *evenRGrid[T]) Index(index coord.EvenR) (T, bool) {
	return e.grid.index(index)
}
func (e *evenRGrid[T]) Set(index coord.EvenR, value T) {
	e.grid.set(index, value)
}
func (e *evenRGrid[T]) Delete(index coord.EvenR) {
	e.grid.delete(index)
}
func (e *evenRGrid[T]) Iterator() GridIterator[T, coord.EvenR, *coord.EvenRs] {
	return e.iterator(coord.Axial.EvenR)
}

type OddQGrid[T any] Grid[T, coord.OddQ, *coord.OddQs]
type oddQGrid[T any] struct {
	*grid[T, coord.OddQ, *coord.OddQs]
}

func NewOddQGrid[T any](options ...Option[T]) OddQGrid[T] {
	return &oddQGrid[T]{grid: newGrid[T, coord.OddQ, *coord.OddQs](options...)}
}
func newOddQGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) OddQGrid[T] {
	return &oddQGrid[T]{grid: convertGrid[T, C, CS, coord.OddQ, *coord.OddQs](grid)}
}
func (o *oddQGrid[T]) Get(index coord.OddQ) T {
	return o.grid.get(index)
}
func (o *oddQGrid[T]) GetAll(index *coord.OddQs) Items[T, coord.OddQ] {
	return o.grid.getAll(index, coord.Axial.OddQ)
}
func (o *oddQGrid[T]) Index(index coord.OddQ) (T, bool) {
	return o.grid.index(index)
}
func (o *oddQGrid[T]) Set(index coord.OddQ, value T) {
	o.grid.set(index, value)
}
func (o *oddQGrid[T]) Delete(index coord.OddQ) {
	o.grid.delete(index)
}
func (o *oddQGrid[T]) Iterator() GridIterator[T, coord.OddQ, *coord.OddQs] {
	return o.iterator(coord.Axial.OddQ)
}

type OddRGrid[T any] Grid[T, coord.OddR, *coord.OddRs]
type oddRGrid[T any] struct {
	*grid[T, coord.OddR, *coord.OddRs]
}

func NewOddRGrid[T any](options ...Option[T]) OddRGrid[T] {
	return &oddRGrid[T]{grid: newGrid[T, coord.OddR, *coord.OddRs](options...)}
}
func newOddRGrid[T any, C coord.CCoord, CS coord.CCoords](grid *grid[T, C, CS]) OddRGrid[T] {
	return &oddRGrid[T]{grid: convertGrid[T, C, CS, coord.OddR, *coord.OddRs](grid)}
}
func (o *oddRGrid[T]) Get(index coord.OddR) T {
	return o.grid.get(index)
}
func (o *oddRGrid[T]) GetAll(index *coord.OddRs) Items[T, coord.OddR] {
	return o.grid.getAll(index, coord.Axial.OddR)
}
func (o *oddRGrid[T]) Index(index coord.OddR) (T, bool) {
	return o.grid.index(index)
}
func (o *oddRGrid[T]) Set(index coord.OddR, value T) {
	o.grid.set(index, value)
}
func (o *oddRGrid[T]) Delete(index coord.OddR) {
	o.grid.delete(index)
}
func (o *oddRGrid[T]) Iterator() GridIterator[T, coord.OddR, *coord.OddRs] {
	return o.iterator(coord.Axial.OddR)
}
